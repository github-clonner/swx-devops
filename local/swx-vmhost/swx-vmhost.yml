version: "2.1"

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks:
  default:
    driver: bridge

volumes:
  traefik-ssl:
    driver: local
  swx-web-server-data:
    driver: local
  swx-web-db-data:
    driver: local
  neo4j-data:
    driver: local
  minio:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/import/minio/jupyterhub/osm'
  osm-postgis-data:
    driver: local
  osm-import_done:
    driver: local
  osm-import_queue:
    driver: local
  osm-cache:
    driver: local
  osm-settings:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/import/minio/jupyterhub/osm'
  osm-pgadmin-data:
    driver: local
  osm-pgadmin-storage:
    driver: local
  qgis-logs:
    driver: local
  geoserver-data:
    driver: local
  django-geopackage-server_data:
    driver: local
  django-geopackage-server-media:
    driver: local
  osh-db:
    driver: local
  osh-logs:
    driver: local
  torgi-postgis-data:
    driver: local
  torgi-pgadmin-data:
    driver: local
  torgi-pgadmin-storage:
    driver: local
  ipfs-staging:
    driver: local
  ipfs-data:
    driver: local
  ipfs-cluster-data:
    driver: local
  nginx-cac-www:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/data/swx-protected-website'


#  splunk-etc:
#    driver: local
#  kanboard_data:
#    driver: local
#  kanboard_plugins:
#    driver: local
#  kanboard_ssl:
#    driver: local
#  qri-data:
#    driver: local
#  i2p-data:
#    driver: local

services:

  traefik:
    extends:
      file: docker-traefik/docker-compose.yml
      service: traefik
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - default
    environment:
      REST_PORT: "7080"
      HTTP_PORT: "80"
      HTTPS_PORT: "443"
      EMAIL: "devops@sofwerx.org"
      DNS_DOMAIN: ${DNS_DOMAIN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
      AWS_REGION: ${AWS_REGION}
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=7080"
      - "traefik.frontend.rule=Host:traefik.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  nginx-cac:
    extends:
      file: nginx-cac/docker-compose.yml
      service: nginx-cac
    restart: always
    logging: *default-logging
    networks:
      - default
    ports:
      - 6443:443
    volumes:
      - traefik-ssl:/ssl
      - nginx-cac-www:/www
    environment:
      HOSTNAME: ${NGINX_CAC_HOSTNAME}
      DNS_DOMAIN: ${DNS_DOMAIN}
      SSL_CERT_PATH: "/ssl/live/${DNS_DOMAIN}"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=nginx-cac"
      - "traefik.port=443"
      - "traefik.protocol=https"
      - "traefik.frontend.rule=Host:${NGINX_CAC_HOSTNAME}.${DNS_DOMAIN}"
#      - "traefik.frontend.entryPoints=https"
#      - "traefik.frontend.redirect=https"
#      - "traefik.frontend.redirect.permanent=true"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.passTLSClientCert.pem=true"
      - "traefik.frontend.passTLSClientCert.infos.sans=true"
#                  vvv deprecated vvv
      - "traefik.frontend.passTLSCert=true"

  swx-web-db:
    extends:
      file: web-sofwerx/docker-compose.yml
      service: swx-web-db
    restart: always
    volumes:
      - traefik-ssl:/ssl
      - swx-web-db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${SWX_WEB_DB_PASSWD}
      DNS_DOMAIN: ${DNS_DOMAIN}
      SSL_CERT_PATH: "/ssl/live/${DNS_DOMAIN}"
    logging: *default-logging
    networks:
      - default
    ports:
      - 8306:3306
    labels:
      - "traefik.enable=false"

  swx-web-server:
    extends:
      file: web-sofwerx/docker-compose.yml
      service: swx-web-server
    restart: always
    volumes:
      - traefik-ssl:/ssl
      - swx-web-server-data:/var/www
    environment:
      DNS_DOMAIN: ${DNS_DOMAIN}
      SSL_CERT_PATH: "/ssl/live/${DNS_DOMAIN}"
    logging: *default-logging
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=swx-web-server"
      - "traefik.port=80"
      - "traefik.protocol=http"
      - "traefik.frontend.rule=Host:swxweb.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  neo4j:
    extends:
      file: docker-neo4j/docker-compose.yml
      service: neo4j
    image: neo4j:latest
    restart: always
    networks:
      - default
    ports:
      - 7687:7687
      - 7474:7474
      - 7473:7473
    logging: *default-logging
    volumes:
      - traefik-ssl:/ssl
      - neo4j-data:/var/lib/neo4j
    labels:
      - "traefik.enable=true"
      - "traefik.backend=neo4j"
      - "traefik.port=7474"
      - "traefik.frontend.rule=Host:neo4j.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  cesium:
    extends:
      file: docker-cesium/docker-compose.yml
      service: cesium
    image: sofwerx/cesium
    restart: always
    logging: *default-logging
    networks:
      - default
    volumes:
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=true"
      - "traefik.backend=cesium"
      - "traefik.port=8088"
      - "traefik.frontend.rule=Host:cesium.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"


#  underground:
#    extends:
#      file: underground/docker-compose.yml
#      service: underground
#    image: sofwerx/underground
#    container_name: underground
#    hostname: underground
#    restart: always
#    networks:
#      - default
#    logging: *default-logging
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=underground"
#      - "traefik.port=3000"
#      - "traefik.frontend.rule=Host:underground.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=false"
#      - "traefik.frontend.entryPoints=http,https"

  pocket-node:
    extends:
      file: pocket-node/docker-compose.yml
      service: pocket-node
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=pocket-node"
      - "traefik.port=${POCKET_NODE_SERVER_PORT}"
      - "traefik.frontend.rule=Host:pocket-node.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  opensphere:
    extends:
      file: docker-opensphere/docker-compose.yml
      service: opensphere
    image: sofwerx/opensphere
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=opensphere"
      - "traefik.port=8282"
      - "traefik.frontend.rule=Host:opensphere.${DNS_DOMAIN}"
#      - "traefik.frontend.rule=Host:opensphere.${DNS_DOMAIN};AddPrefix:/opensphere/dist/opensphere"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  torgi-postgis:
    # About the postgresql version, it should match in the dockerfile of docker-imposm3
    image: kartoza/postgis:9.6-2.4
    hostname: torgi-postgis
    container_name: torgi-postgis
    restart: always
    environment:
      - POSTGRES_USER=${TORGI_POSTGRES_USER}
      - POSTGRES_PASS=${TORGI_POSTGRES_PASS}
      - POSTGRES_DBNAME=${TORGI_POSTGRES_DBNAME}
    logging: *default-logging
    volumes:
      - 'torgi-postgis-data:/var/lib/postgresql'
    # Uncomment to use the postgis database from outside the docker network
    ports:
      - "35433:5432"
    healthcheck:
        test: "exit 0"
    networks:
      - default
    labels:
      - "traefik.enable=false"

  torgi-pgadmin:
    container_name: torgi-pgadmin
    hostname: torgi-pgadmin
    image: sofwerx/pgadmin4
    build: docker-pgadmin4/
    environment:
      PGADMIN_DEFAULT_EMAIL: ${TORGI_POSTGRES_USER}@sofwerx.org
      PGADMIN_DEFAULT_PASSWORD: ${TORGI_POSTGRES_PASS}
    volumes:
       - torgi-pgadmin-data:/root/.pgadmin
       - torgi-pgadmin-storage:/var/lib/pgadmin/storage
    restart: unless-stopped
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=torgi-pgadmin"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:torgi-pgadmin.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  torgi-pgadmin-minio:
    image: minio/minio
    container_name: torgi-pgadmin-minio
    hostname: torgi-pgadmin-minio
    volumes:
      - torgi-pgadmin-storage:/var/lib/pgadmin/storage
    networks:
      - default
    command: server /var/lib/pgadmin/storage
    restart: always
    environment:
      MINIO_URL: https://torgi-pgadmin-minio.${DNS_DOMAIN}
      MINIO_ACCESS_KEY: ${TORGI_POSTGRES_USER}@sofwerx.org
      MINIO_SECRET_KEY: ${TORGI_POSTGRES_PASS}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=torgi-pgadmin-minio"
      - "traefik.port=9000"
      - "traefik.frontend.rule=Host:torgi-pgadmin-minio.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  osm-postgis:
    # About the postgresql version, it should match in the dockerfile of docker-imposm3
    image: kartoza/postgis:9.6-2.4
    hostname: osm-postgis
    container_name: osm-postgis
    restart: always
    environment:
      - POSTGRES_USER=${OSM_POSTGRES_USER}
      - POSTGRES_PASS=${OSM_POSTGRES_PASS}
      - POSTGRES_DBNAME=${OSM_POSTGRES_DBNAME}
      # Uncomment to expose the postgis database on the network
      # - ALLOW_IP_RANGE= 0.0.0.0/0
    logging: *default-logging
    volumes:
      - 'osm-postgis-data:/var/lib/postgresql'
    # Uncomment to use the postgis database from outside the docker network
    ports:
      - "35432:5432"
    healthcheck:
        test: "exit 0"
    labels:
      - "traefik.enable=false"

  osm-pgadmin:
    container_name: osm-pgadmin
    hostname: osm-pgadmin
    image: sofwerx/pgadmin4
    build: docker-pgadmin4/
    environment:
      PGADMIN_DEFAULT_EMAIL: ${OSM_POSTGRES_USER}@sofwerx.org
      PGADMIN_DEFAULT_PASSWORD: ${OSM_POSTGRES_PASS}
    volumes:
       - osm-pgadmin-data:/root/.pgadmin
       - osm-pgadmin-storage:/var/lib/pgadmin/storage
    restart: unless-stopped
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=osm-pgadmin"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:osm-pgadmin.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  osm-pgadmin-minio:
    image: minio/minio
    container_name: osm-pgadmin-minio
    hostname: osm-pgadmin-minio
    volumes:
      - osm-pgadmin-storage:/var/lib/pgadmin/storage
    networks:
      - default
    command: server /var/lib/pgadmin/storage
    restart: always
    environment:
      MINIO_URL: https://osm-pgadmin-minio.${DNS_DOMAIN}
      MINIO_ACCESS_KEY: ${OSM_POSTGRES_USER}@sofwerx.org
      MINIO_SECRET_KEY: ${OSM_POSTGRES_PASS}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=osm-pgadmin-minio"
      - "traefik.port=9000"
      - "traefik.frontend.rule=Host:osm-pgadmin-minio.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  osm-import:
    build: docker-osm/docker-imposm3
    image: sofwerx/docker-osm:imposm-latest
    container_name: osm-import
    hostname: osm-import
    logging: *default-logging
    volumes:
      # These are sharable to other containers
      - osm-import_done:/home/import_done
      - osm-import_queue:/home/import_queue
      - osm-cache:/home/cache
      - osm-settings:/home/settings
    depends_on:
        osm-postgis:
          condition: service_healthy
    environment:
      - POSTGRES_USER=${OSM_POSTGRES_USER}
      - POSTGRES_PASS=${OSM_POSTGRES_PASS}
      - POSTGRES_DBNAME=${OSM_POSTGRES_DBNAME}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=osm-postgis
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=120
      # folder for settings (with *.json and *.sql)
      - SETTINGS=settings
      # folder for caching
      - CACHE=cache
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # it can be 3857
      - SRID=4326
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#optimize
      - OPTIMIZE=false
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_PRODUCTION=public
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_IMPORT=import
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_BACKUP=backup
      # Install some styles if you are using the default mapping. It can be 'yes' or 'no'
      - QGIS_STYLE=yes
      # Use clip in the database
      - CLIP=no
    labels:
      - "traefik.enable=false"

  osm-update:
    build: docker-osm/docker-osmupdate
    image: sofwerx/docker-osm:osmupdate-latest
    container_name: osm-update
    hostname: osm-update
    volumes:
      # These are sharable to other containers
      - osm-import_done:/home/import_done
      - osm-import_queue:/home/import_queue
      - osm-cache:/home/cache
      - osm-settings:/home/settings
    depends_on:
      osm-postgis:
        condition: service_healthy
    restart: always
    environment:
      # These are all currently the defaults but listed here for your
      # convenience if you want to change them
      # the maximum time range to assemble a cumulated changefile.
      - MAX_DAYS=100
      # osmupdate uses a combination of minutely, hourly and daily changefiles. This value can be minute, hour, day or sporadic.
      - DIFF=sporadic
      # argument to determine the maximum number of parallely processed changefiles.
      - MAX_MERGE=7
      # define level for gzip compression. values between 1 (low compression but fast) and 9 (high compression but slow)
      - COMPRESSION_LEVEL=1
      # change the URL to use a custom URL to fetch regional file updates.
      - BASE_URL=http://planet.openstreetmap.org/replication/
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=120
    labels:
      - "traefik.enable=false"

  qgis:
    build: docker-osm/qgis/
    image: sofwerx/qgis-server:3.0
    hostname: qgis
    container_name: qgis
    logging: *default-logging
    volumes:
      - qgis-logs:/var/log/apache2
      - osm-settings:/web/settings
    links:
      - osm-postgis:db
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.backend=qgis"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:qgis.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  geoserver:
    build: docker-geoserver/
    image: sofwerx/geoserver
    hostname: geoserver
    container_name: geoserver
    restart: always
    environment:
      ADMIN_PASSWD: ${GEOSERVER_ADMIN_PASSWORD}
    networks:
      - default
    links:
      - osm-postgis:postgis
    volumes:
      - geoserver-data:/opt/geoserver/data_dir
      - minio:/opt/geoserver/minio
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=geoserver"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:geoserver.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  mapserver:
    hostname: mapserver
    container_name: mapserver
    build:
      context: mapserver-docker/
      args:
        GDAL_VERSION: 2.3.1
        MAPSERVER_VERSION: 7.2.0
    image: sofwerx/mapserver:7.2.0
    restart: always
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=mapserver"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:mapserver.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  django-geopackage-server:
    extends:
      file: DjangoGeoPackageServer/docker-compose.yml
      service: django-geopackage-server
    image: sofwerx/django-geopackage-server
    container_name: django-geopackage-server
    hostname: django-geopackage-server
    restart: always
    logging: *default-logging
    volumes:
      - django-geopackage-server_data:/data
      - django-geopackage-server-media:/app/GPKGServer/media
    environment:
      SQLITE_DB_PATH: /data/db.sqlite3
      DJANGO_HOSTNAME: django-geopackage-server.${DNS_DOMAIN}
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=django-geopackage-server"
      - "traefik.port=7999"
      - "traefik.frontend.rule=Host:django-geopackage-server.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
#
#  rml:
#    build:
#      context: dockerRML/
#      dockerfile: Dockerfile.GPU
#      args:
#        ARCH: ${ARCH}
#    image: sofwerx/rml:${ARCH}-GPU

  osh-core:
    extends:
      file: docker-osh/docker-compose.yml
      service: osh-core
    restart: always
    networks:
      - default
    ports:
      - 8181:8181
    volumes:
      - osh-logs:/data/logs/
      - osh-db:/data/db/
    labels:
      - "traefik.enable=true"
      - "traefik.backend=osh-core"
      - "traefik.port=8181"
      - "traefik.frontend.rule=Host:osh.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"


  ipfs:
    container_name: ipfs
    hostname: ipfs
    restart: always
    privileged: true
    ports:
      - 4001:4001             # public swarm address
#      - 127.0.0.1:5001:5001   # api service
#      - 127.0.0.1:8080:8080   # gateway service
    image: ipfs/go-ipfs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ipfs-data:/data/ipfs/
      - ipfs-staging:/export
      - /:/chroot
    command: daemon --routing=dhtclient --enable-gc
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=ipfs"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:https://ipfs.${DNS_DOMAIN}||Vary:Origin"
      - "traefik.frontend.headers.customRequestHeaders=Origin:https://ipfs.${DNS_DOMAIN}"
      - "traefik.frontend.auth.basic=admin:${IPFS_API_PASSWORD_APR1}"
      - "traefik.port=5001"
      - "traefik.frontend.rule=Host:ipfs.${DNS_DOMAIN};Path:/;AddPrefix:/webui"
      - "traefik.api.port=5001"
      - "traefik.api.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/api"
      - "traefik.webui.port=5001"
      - "traefik.webui.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/webui"
      - "traefik.ipfs.port=8080"
      - "traefik.ipfs.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/ipfs"
      - "traefik.ipns.port=8080"
      - "traefik.ipns.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/ipns"


#  srt42:
#    container_name: srt42
#    hostname: srt42
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT42_RTSP_URL}
#      RTSP_USER_ID: ${SRT42_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT42_RTSP_USER_PW}
#      SRT_PORT: 20042
#      SRT_PASSPHRASE: ${SRT42_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT42_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20042:20042/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt_tcp_42:
#    container_name: srt_tcp_42
#    hostname: srt_tcp_42
#    build: docker-srt/
#    image: sofwerx/srt-tcp
#    restart: always
#    environment:
#      SRT_URL: srt://srt.${DNS_DOMAIN}:20042
#      SRT_PORT: 20042
#      SRT_PASSPHRASE: ${SRT42_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT42_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20042:20042/tcp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi42:
#    container_name: avahi42
#    hostname: avahi42
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt42:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi42
#      SERVICE_NAME: "${SRT42_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20042
#    ports:
#      - 20042:20042/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt43:
#    container_name: srt43
#    hostname: srt43
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT43_RTSP_URL}
#      RTSP_USER_ID: ${SRT43_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT43_RTSP_USER_PW}
#      SRT_PORT: 20043
#      SRT_PASSPHRASE: ${SRT43_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT43_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20043:20043/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt_tcp_43:
#    container_name: srt_tcp_43
#    hostname: srt_tcp_43
#    build: docker-srt/
#    image: sofwerx/srt-tcp
#    restart: always
#    environment:
#      SRT_URL: srt://srt.${DNS_DOMAIN}:20043
#      SRT_PORT: 20043
#      SRT_PASSPHRASE: ${SRT43_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT43_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20043:20043/tcp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi43:
#    container_name: avahi43
#    hostname: avahi43
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt43:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi43
#      SERVICE_NAME: "${SRT43_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20043
#    ports:
#      - 20043:20043/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt44:
#    container_name: srt44
#    hostname: srt44
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT44_RTSP_URL}
#      RTSP_USER_ID: ${SRT44_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT44_RTSP_USER_PW}
#      SRT_PORT: 20044
#      SRT_PASSPHRASE: ${SRT44_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT44_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20044:20044/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi44:
#    container_name: avahi44
#    hostname: avahi44
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt44:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi44
#      SERVICE_NAME: "${SRT44_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20044
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt45:
#    container_name: srt45
#    hostname: srt45
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT45_RTSP_URL}
#      RTSP_USER_ID: ${SRT45_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT45_RTSP_USER_PW}
#      SRT_PORT: 20045
#      SRT_PASSPHRASE: ${SRT45_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT45_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20045:20045/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi45:
#    container_name: avahi45
#    hostname: avahi45
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt45:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi45
#      SERVICE_NAME: "${SRT45_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20045
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt46:
#    container_name: srt46
#    hostname: srt46
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT46_RTSP_URL}
#      RTSP_USER_ID: ${SRT46_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT46_RTSP_USER_PW}
#      SRT_PORT: 20046
#      SRT_PASSPHRASE: ${SRT46_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT46_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20046:20046/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi46:
#    container_name: avahi46
#    hostname: avahi46
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt46:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi46
#      SERVICE_NAME: "${SRT46_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20046
#    ports:
#      - 20046:20046/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt47:
#    container_name: srt47
#    hostname: srt47
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT47_RTSP_URL}
#      RTSP_USER_ID: ${SRT47_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT47_RTSP_USER_PW}
#      SRT_PORT: 20047
#      SRT_PASSPHRASE: ${SRT47_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT47_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20047:20047/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi47:
#    container_name: avahi47
#    hostname: avahi47
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt47:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi47
#      SERVICE_NAME: "${SRT47_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20047
#    ports:
#      - 20047:20047/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt48:
#    container_name: srt48
#    hostname: srt48
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT48_RTSP_URL}
#      RTSP_USER_ID: ${SRT48_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT48_RTSP_USER_PW}
#      SRT_PORT: 20048
#      SRT_PASSPHRASE: ${SRT48_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT48_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20048:20048/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi48:
#    container_name: avahi48
#    hostname: avahi48
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt48:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi48
#      SERVICE_NAME: "${SRT48_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20048
#    ports:
#      - 20048:20048/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt49:
#    container_name: srt49
#    hostname: srt49
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT49_RTSP_URL}
#      RTSP_USER_ID: ${SRT49_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT49_RTSP_USER_PW}
#      SRT_PORT: 20049
#      SRT_PASSPHRASE: ${SRT49_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT49_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20049:20049/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi49:
#    container_name: avahi49
#    hostname: avahi49
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt49:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi49
#      SERVICE_NAME: "${SRT49_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20049
#    ports:
#      - 20049:20049/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt50:
#    container_name: srt50
#    hostname: srt50
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT50_RTSP_URL}
#      RTSP_USER_ID: ${SRT50_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT50_RTSP_USER_PW}
#      SRT_PORT: 20050
#      SRT_PASSPHRASE: ${SRT50_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT50_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20050:20050/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi50:
#    container_name: avahi50
#    hostname: avahi50
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt50:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi50
#      SERVICE_NAME: "${SRT50_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20050
#    ports:
#      - 20050:20050/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt51:
#    container_name: srt51
#    hostname: srt51
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT51_RTSP_URL}
#      RTSP_USER_ID: ${SRT51_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT51_RTSP_USER_PW}
#      SRT_PORT: 20051
#      #SRT_PASSPHRASE: ${SRT51_SRT_PASSPHRASE}
#      #SRT_KEY_LENGTH: ${SRT51_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20051:20051/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi51:
#    container_name: avahi51
#    hostname: avahi51
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt51:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi51
#      SERVICE_NAME: "${SRT51_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._udp
#      SERVICE_PORT: 20051
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt52:
#    container_name: srt52
#    hostname: srt52
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT52_RTSP_URL}
#      RTSP_USER_ID: ${SRT52_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT52_RTSP_USER_PW}
#      SRT_PORT: 20052
#      SRT_PASSPHRASE: ${SRT52_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT52_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20052:20052/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi52:
#    container_name: avahi52
#    hostname: avahi52
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt52:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi52
#      SERVICE_NAME: "${SRT52_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20052
#    ports:
#      - 20052:20052/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt53:
#    container_name: srt53
#    hostname: srt53
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT53_RTSP_URL}
#      RTSP_USER_ID: ${SRT53_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT53_RTSP_USER_PW}
#      SRT_PORT: 20053
#      SRT_PASSPHRASE: ${SRT53_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT53_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20053:20053/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi53:
#    container_name: avahi53
#    hostname: avahi53
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt53:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi53
#      SERVICE_NAME: "${SRT53_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20053
#    ports:
#      - 20053:20053/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt57:
#    container_name: srt57
#    hostname: srt57
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT57_RTSP_URL}
#      RTSP_USER_ID: ${SRT57_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT57_RTSP_USER_PW}
#      SRT_PORT: 20057
#      SRT_PASSPHRASE: ${SRT57_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT57_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20057:20057/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi57:
#    container_name: avahi57
#    hostname: avahi57
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt57:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi57
#      SERVICE_NAME: "${SRT57_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20057
#    ports:
#      - 20057:20057/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt58:
#    container_name: srt58
#    hostname: srt58
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT58_RTSP_URL}
#      RTSP_USER_ID: ${SRT58_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT58_RTSP_USER_PW}
#      SRT_PORT: 20058
#      SRT_PASSPHRASE: ${SRT58_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT58_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20058:20058/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi58:
#    container_name: avahi58
#    hostname: avahi58
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt58:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi58
#      SERVICE_NAME: "${SRT58_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20058
#    ports:
#      - 20058:20058/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  srt59:
#    container_name: srt59
#    hostname: srt59
#    build: docker-gstreamer-rtsp-srt/
#    image: sofwerx/gstreamer-rtsp-srt
#    restart: always
#    environment:
#      RTSP_URL: ${SRT59_RTSP_URL}
#      RTSP_USER_ID: ${SRT59_RTSP_USER_ID}
#      RTSP_USER_PW: ${SRT59_RTSP_USER_PW}
#      SRT_PORT: 20059
#      SRT_PASSPHRASE: ${SRT59_SRT_PASSPHRASE}
#      SRT_KEY_LENGTH: ${SRT59_SRT_KEY_LENGTH}
#    healthcheck:
#      test: "exit 0"
#    ports:
#      - 20059:20059/udp
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"
#
#  avahi59:
#    container_name: avahi59
#    hostname: avahi59
#    build: docker-avahi-config/
#    image: sofwerx/avahi-config
#    restart: on-failure:5
#    depends_on:
#      srt59:
#        condition: service_healthy
#    environment:
#      REPLACE_WILDCARDS: "yes"
#      SERVICE_FILENAME: avahi59
#      SERVICE_NAME: "${SRT59_RTSP_SERVICE_NAME}"
#      SERVICE_TYPE: _x-srt._tcp
#      SERVICE_PORT: 20059
#    ports:
#      - 20059:20059/tcp
#    volumes:
#      - /etc/avahi/services:/etc/avahi/services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=false"

#  glo:
#    extends:
#      file: glo/docker-compose.yml
#      service: glo
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=glo"
#      - "traefik.port=4200"
#      - "traefik.frontend.rule=Host:glo.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=false"
#      - "traefik.frontend.entryPoints=http,https"
#
#  glo-services:
#    extends:
#      file: glo-services/docker-compose.yml
#      service: glo-services
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=glo-services"
#      - "traefik.port=4200"
#      - "traefik.frontend.rule=Host:glo-services.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=false"
#      - "traefik.frontend.entryPoints=http,https"
#
#  glo-demo:
#    extends:
#      file: glo-demo/docker-compose.yml
#      service: glo-demo
#    image: sofwerx/glo-demo
#    container_name: glo-demo
#    hostname: glo-demo
#    restart: always
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=glo-demo"
#      - "traefik.port=4200"
#      - "traefik.frontend.rule=Host:glo-demo.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=false"
#      - "traefik.frontend.entryPoints=http,https"
#  qri:
#    container_name: qri
#    hostname: qri
#    restart: always
#    build: docker-qri/
#    image: sofwerx-qri
#    volumes:
#      - qri-data:/data
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=qri"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#      - "traefik.port=2505"
#      - "traefik.frontend.rule=Host:ipfs.${DNS_DOMAIN};Path:/;AddPrefix:/webui"
#      - "traefik.ipfs.port=2503"
#      - "traefik.ipfs.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/json-api"
#      - "traefik.webui.port=2505"
#      - "traefik.webui.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/webui"

#  i2p:
#    container_name: i2p
#    hostname: i2p
#    image: sofwerx/i2p:${ARCH}
#    build: docker-i2p/
#    volumes:
#      - "i2p-data:/var/lib/i2p"
#    # Description of ports at https://geti2p.net/ports
#    ports:
#      - "2827:2827"           # - BOB port
#      - "127.0.0.1:4444:4444" # — HTTP proxy
#      - "127.0.0.1:6668:6668" # — Proxy to Irc2P
#      - "127.0.0.1:7656:7656" # - SAM port
#      - "127.0.0.1:7657:7657" # — router console
#      - "127.0.0.1:7658:7658" # — self-hosted eepsite
#      - "7659:7659"           # — SMTP proxy to smtp.postman.i2p
#      - "7660:7660"           # — POP3 proxy to pop.postman.i2p
#      - "8998:8998"           # — Proxy to mtn.i2p-projekt.i2p
##
#  kanboard:
#    image: kanboard/kanboard:latest
#    container_name: kanboard
#    hostname: kanboard
#    volumes:
#     - kanboard_data:/var/www/app/data
#     - kanboard_plugins:/var/www/app/plugins
#     - kanboard_ssl:/etc/nginx/ssl
#    restart: always
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=kanboard"
#      - "traefik.port=80"
#      - "traefik.frontend.rule=Host:kanboard.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#  splunk:
#    container_name: splunk
#    hostname: splunk
#    image: splunk/splunk:7.2.0
#    environment:
#      SPLUNK_START_ARGS: --accept-license
#      SPLUNK_PASSWORD: ${SPLUNK_PASSWORD}
#    ports:
#      - 8000:8000/tcp
#      - 4001/tcp
#      - 8065/tcp
#      - 8088-8089/tcp
#      - 8191/tcp
#      - 9887/tcp
#      - 9997/tcp
#    restart: always
#    volumes:
#      - /data/splunk:/opt/splunk/var
#      - splunk-etc:/opt/splunk/etc
#      - /import/minio:/import/minio
#    networks:
#      - default
#    logging: *default-logging
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=splunk"
#      - "traefik.port=8000"
#      - "traefik.frontend.rule=Host:splunk.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
