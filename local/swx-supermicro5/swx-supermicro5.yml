version: '2.1'

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks:
  default:
    driver: bridge

volumes:
  traefik-ssl:
    driver: local
  sortoe-db-data:
    driver: local
  sortoe-static:
    driver: local

  speakeasy_nifi_datafiles:
    driver: local
  speakeasy_nifi_scriptfiles:
    driver: local
  speakeasy_nifi_certfiles:
    driver: local
  speakeasy_nifi_data:
    driver: local
  speakeasy_mongodb:
    driver: local
  speakeasy_models:
    driver: local
  speakeasy_file_share:
    driver: local
  speakeasy-minio-data:
    driver: local
  argument-mapper-mongo-db:
    driver: local
  argument-mapper-mongo-configdb:
    driver: local
  argument-mapper-elasticsearch-data:
    driver: local
  argument-mapper-server-logs:
    driver: local
  argument-mapper-server-config:
    driver: local

services:

  traefik:
    extends:
      file: docker-traefik/docker-compose.yml
      service: traefik
    volumes:
      - traefik-ssl:/ssl
    restart: always
    ports:
      - 65080:65080
      - 65443:65443
    networks:
      - default
    environment:
      REST_PORT: "7080"
      HTTP_PORT: "65080"
      HTTPS_PORT: "65443"
      EMAIL: "devops@sofwerx.org"
      DNS_DOMAIN: ${DNS_DOMAIN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=7080"
      - "traefik.frontend.rule=Host:traefik.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  sortoe-nginx:
    build:
      context: docker-sortoe/
      dockerfile: Dockerfile.nginx
    depends_on:
      - sortoe-service-1.0.0
      - sortoe-web
    container_name: sortoe-nginx
    hostname: sortoe-nginx
    restart: always
    networks:
      - default
    volumes:
      - sortoe-static:/var/www
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=sortoe-nginx"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:sortoe.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  sortoe-web:
    build:
      context: docker-sortoe/
      dockerfile: Dockerfile.web
    image: sortoe-web
    container_name: sortoe-web
    hostname: sortoe-web
    restart: always
    networks:
      - default
    environment:
      SORTOE_API_URL: /v1.0.0
      #SORTOE_API_URL: https://sortoe.${DNS_DOMAIN}/v1.0.0
      SORTOE_API_VERSION: 1.0.0
      SORTOE_DATASERVICE_HOST: ""
      #SORTOE_DATASERVICE_HOST: sortoe.${DNS_DOMAIN}
      SORTOE_GRAPHQL_URL: /v1.0.0/graphiql
      #SORTOE_GRAPHQL_URL: https://sortoe.${DNS_DOMAIN}/v1.0.0/graphiql
      NODE_ENV: production
      PUBLIC_URL: https://sortoe.${DNS_DOMAIN}
      #REGISTER_SERVICE_WORKER: 'false'
    volumes:
      - sortoe-static:/var/sortoe
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=sortoe-web"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:sortoe-web.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  sortoe-service-1.0.0:
    image: 212171213234.dkr.ecr.us-east-1.amazonaws.com/sortoe/dataservice:1.0.0-b2
    depends_on:
      - sortoe-db
    container_name: sortoe-service-1.0.0
    hostname: sortoe-service-1.0.0
    restart: always
    networks:
      - default
    environment:
      - APP_SETTINGS=project.config.ProductionConfig
      - DATABASE_URL=postgres://${SORTOE_POSTGRES_USER}:${SORTOE_POSTGRES_PASSWORD}@sortoe-db:5432/sortoe
      - DATABASE_TEST_URL=postgres://${SORTOE_POSTGRES_USER}:${SORTOE_POSTGRES_PASSWORD}@sortoe-db:5432/sortoe-test
    volumes:
      - sortoe-static:/var/sortoe
    command: python manage.py runserver -h 0.0.0.0
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=sortoe-service"
      - "traefik.port=5000"
      - "traefik.frontend.rule=Host:sortoe-service.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  sortoe-db:
    image: 212171213234.dkr.ecr.us-east-1.amazonaws.com/sortoe/db:latest
    container_name: sortoe-db
    hostname: sortoe-db
    restart: always
    networks:
      - default
    environment:
      POSTGRES_USER: ${SORTOE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SORTOE_POSTGRES_PASSWORD}
    healthcheck:
      test: exit 0
    volumes:
      - sortoe-db-data:/var/lib/postgresql/data
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  speakeasy-install:
    container_name: speakeasy-install
    hostname: speakeasy-install
    image: sofwerx/speakeasy-install
    build: speakeasy/
    volumes:
      - speakeasy_file_share:/var/speakeasy
      - speakeasy_models:/var/speakeasy/models
    environment:
      SPEAKEASY_SHARED: ${SPEAKEASY_SHARED}
      SPEAKEASY_VERSION: ${SPEAKEASY_VERSION}
      SPEAKEASY_MINIO_URL: https://speakeasy-minio.${DNS_DOMAIN}
      SPEAKEASY_MINIO_ACCESS_KEY: ${SPEAKEASY_MINIO_ACCESS_KEY}
      SPEAKEASY_MINIO_SECRET_KEY: ${SPEAKEASY_MINIO_SECRET_KEY}
    depends_on:
      - speakeasy-minio
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  speakeasy-ui:
    container_name: speakeasy-ui
    hostname: speakeasy-ui
    image: sofwerx/speakeasy-ui:v${SPEAKEASY_VERSION}
    depends_on:
      - speakeasy-install
      - speakeasy-mongo
    build: speakeasy/ui/
    restart: always
    environment:
      - FLASK_SERVER_NAME=0.0.0.0
      - FLASK_SERVER_PORT=5000
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      - MONGO_EXPRESS=https://speakeasy-mongo-express.${DNS_DOMAIN}/
      - MONGO_CONNECT=mongodb://${SPEAKEASY_MONGO_USERNAME}:${SPEAKEASY_MONGO_PASSWORD}@speakeasy-mongo/${SPEAKEASY_MONGO_DATABASE}?authSource=admin
      - OCR_SERVICE=http://speakeasy-ocr-service.${DNS_DOMAIN}/poc_api/
      - TFC_SERVICE=http://speakeasy-tfc-service.${DNS_DOMAIN}/poc_api/
      - NIFI_SERVICE=http://speakeasy-nifi-service.${DNS_DOMAIN}/nifi/
    ports:
      - "5000:5000"
    volumes:
      - speakeasy_file_share:/var/speakeasy
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-ui"
      - "traefik.port=5000"
      - "traefik.frontend.rule=Host:speakeasy.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-mongo:
    container_name: speakeasy-mongo
    hostname: speakeasy-mongo
    image: sofwerx/speakeasy-mongo:v${SPEAKEASY_VERSION}
    build: speakeasy/mongo/
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${SPEAKEASY_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${SPEAKEASY_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${SPEAKEASY_MONGO_DATABASE}
    volumes:
      - speakeasy_mongodb:/data/db
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  speakeasy-mongo-express:
    container_name: speakeasy-mongo-express
    hostname: speakeasy-mongo-express
    image: speakeasy/mongo_express:v${SPEAKEASY_VERSION}
    depends_on:
      - speakeasy-mongo
    build: speakeasy/mongo_express/
    restart: always
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${SPEAKEASY_MONGO_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${SPEAKEASY_MONGO_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${SPEAKEASY_MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${SPEAKEASY_MONGO_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: speakeasy-mongo
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-mongo-express"
      - "traefik.port=8081"
      - "traefik.frontend.rule=Host:speakeasy-mongo-express.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-tfs-service:
    container_name: speakeasy-tfs-service  
    hostname: speakeasy-tfs-service  
    image: sofwerx/speakeasy-tfs-service:v${SPEAKEASY_VERSION}
    build: speakeasy/tfs_service/
    restart: always
    volumes:
      - speakeasy_models:/models
    environment:
      MODEL_CONFIG_FILE: /models/models.conf
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-tfs-service"
      - "traefik.port=8500"
      - "traefik.frontend.rule=Host:speakeasy-tfs-service.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-tfc-service:
    container_name: speakeasy-tfc-service
    hostname: speakeasy-tfc-service
    image: sofwerx/speakeasy-tfc-service:v${SPEAKEASY_VERSION}
    depends_on:
      - speakeasy-tfs-service
    build: speakeasy/tfc_service/
    restart: always
    volumes:
      - speakeasy_models:/models
    environment:
      - FLASK_SERVER_NAME=0.0.0.0
      - FLASK_SERVER_PORT=5020
      - FLASK_DEBUG=1
      - TF_SERVER_NAME=speakeasy-tfs-service
      - TF_SERVER_PORT=8500
      - ENDE_MODEL_SENTENCE_PIECE=/models/ende/1539080952/assets.extra/wmtende.model
      - ENDE_MODEL_NAME=ende
      - ENDE_MODEL_SIGNATURE_NAME=serving_default
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-tfc-service"
      - "traefik.port=5020"
      - "traefik.frontend.rule=Host:speakeasy-tfc-service.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-nifi-service:
    container_name: speakeasy-nifi-service  
    hostname: speakeasy-nifi-service  
    image: sofwerx/speakeasy-nifi-service:v${SPEAKEASY_VERSION}
    build: speakeasy/nifi_service/
    depends_on:
      - speakeasy-tfs-service
    environment:
      - MONGO_CONNECT=mongodb://${SPEAKEASY_MONGO_USERNAME}:${SPEAKEASY_MONGO_PASSWORD}@speakeasy-mongo/${SPEAKEASY_MONGO_DATABASE}?authSource=admin
      - TFC_SERVICE=http://speakeasy-tfc-service:5020/poc_api
      - OCR_SERVICE_CLEAN=http://speakeasy-ocr-service:5010/poc_api/ocr_client/clean
      - OCR_SERVICE_KEYWORD=http://speakeasy-ocr-service:5010/poc_api/ocr_client/keyword
      - OCR_SERVICE_SUMMARY=http://speakeasy-ocr-service:5010/poc_api/ocr_client/summary
      - OCR_SERVICE_OCR=http://speakeasy-ocr-service:5010/poc_api/ocr_client/ocr
    volumes:
      - speakeasy_nifi_datafiles:/opt/datafiles
      - speakeasy_nifi_scriptfiles:/opt/scriptfiles
      - speakeasy_nifi_certfiles:/opt/certfiles
      - speakeasy_nifi_data:/opt/nifi
      - speakeasy_file_share:/var/speakeasy
      - speakeasy_models:/var/speakeasy/models
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-nifi-service"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:speakeasy-nifi-service.${DNS_DOMAIN}"
      - "traefik.frontend.auth.basic=speakeasy:${SPEAKEASY_MONGO_PASSWORD_APR1}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-ocr-service:
    container_name: speakeasy-ocr-service
    hostname: speakeasy-ocr-service
    image: sofwerx/speakeasy-ocr-service:v${SPEAKEASY_VERSION}
    build: speakeasy/ocr_service/
    restart: always
    volumes:
      - speakeasy_file_share:/var/speakeasy
      - speakeasy_models:/var/speakeasy/models
    environment:
      - FLASK_SERVER_NAME=0.0.0.0
      - FLASK_SERVER_PORT=5010
      - FLASK_DEBUG=1
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-ocr-service"
      - "traefik.port=5010"
      - "traefik.frontend.rule=Host:speakeasy-ocr-service.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  speakeasy-minio:
    image: minio/minio
    container_name: speakeasy-minio
    hostname: speakeasy-minio
    volumes:
      - speakeasy-minio-data:/export
    networks:
      - default
    command: server /export
    restart: always
    environment:
      MINIO_URL: https://speakeasy-minio.${DNS_DOMAIN}
      MINIO_ACCESS_KEY: ${SPEAKEASY_MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${SPEAKEASY_MINIO_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=speakeasy-minio"
      - "traefik.port=9000"
      - "traefik.frontend.rule=Host:speakeasy-minio.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  atn-disc:
    container_name: "atn-disc"
    hostname: "atn-disc"
    build: atn/
    labels:
      - "traefik.enable=false"

  atn:
    container_name: "atn"
    hostname: "atn"
    image: "registry.access.redhat.com/rhel6"
    volumes_from:
      - atn-disc
    expose:
      - "9000"
    ports:
      - "9002:9000"
    environment:
      - "INSTALL_MEDIA_DIR=/atn"
    entrypoint:
      - "/atn/install/dockerTestInstall.sh"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=atn"
      - "traefik.port=9000"
      - "traefik.frontend.rule=Host:atn.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  argument-mapper-mongo:
    image: mongo:3.4
    container_name: argument-mapper-mongo
    hostname: argument-mapper-mongo
    volumes:
      - argument-mapper-mongo-db:/data/db
      - argument-mapper-mongo-configdb:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    labels:
      - "traefik.enable=false"

  argument-mapper-elasticsearch:
    image: elasticsearch:5.6
    container_name: argument-mapper-elasticsearch
    hostname: argument-mapper-hostname
    volumes:
      - argument-mapper-elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: "curl --fail http://localhost:9200/"
    labels:
      - "traefik.enable=false"

  argument-mapper-server:
    build: argument-mapper/ArgumentMapper/
    image: local/argument-mapper-server
    container_name: argument-mapper-server
    hostname: argument-mapper-server
    depends_on:
      - argument-mapper-mongo
      - argument-mapper-elasticsearch
    volumes:
      - argument-mapper-server-logs:/src/server/logs
      - argument-mapper-server-config:/src/server/config
    labels:
      - "traefik.enable=true"
      - "traefik.backend=argument-mapper"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:argument-mapper.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.headers.customRequestHeaders=ssl-client-dn:cn=authorizedUser,o=SOFWERX,c=US||user-info:{'clearances':['TS']}"
      - "traefik.frontend.entryPoints=http,https"

