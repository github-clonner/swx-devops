version: '2.1'

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks: 

  default:
    driver: bridge

volumes:

  traefik-ssl:
    driver: local
  postgres-data:
    driver: local
  guacamole-data:
    driver: local
  nvidia_driver:
    external:
      name: "nvidia_driver_387.36"
  ethereum-mainnet-cachedir:
    driver: local
  ethereum-mainnet-dagdir:
    driver: local
  ethereum-mainnet-datadir:
    driver: local
  ethereum-mainnet-keystore:
    driver: local
  ethereum-rinkeby-cachedir:
    driver: local
  ethereum-rinkeby-dagdir:
    driver: local
  ethereum-rinkeby-datadir:
    driver: local
  ethereum-rinkeby-keystore:
    driver: local 
#  ipfs-staging:
#    driver: local
#  ipfs-data:
#    driver: local
#  ipfs-cluster-data:
#    driver: local 
#  test-data:
#    driver: ipfs
#  iri-data:
#    driver: local
#  dcs-data:
#    driver: local
#  dcs-log:
#    driver: local
  jupyterhub-postgres-data:
    driver: local
  jupyterhub-data:
    driver: local
  minio:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/import/minio/jupyterhub'
  aad-postgres-data:
    driver: local
  aad-public-uploads:
    driver: local

  ssb-data:
    driver: local

  i2p-data:
    driver: local

services:

#  converge:
#    extends:
#      file: converge/docker-compose.yml
#      service: converge
#    network_mode: host
#    privileged: true
#    volumes:
#      - /:/chroot
#    logging: *default-logging
#    labels:
#      - "traefik.enable=false"

  traefik:
    container_name: traefik
    hostname: traefik
    build: docker-traefik/
    image: sofwerx/traefik:${ARCH}
    restart: always
    ports:
      - 9080:9080
      - 9443:9443
    environment:
      HTTP_PORT: "9080"
      HTTPS_PORT: "9443"
      REST_PORT: "8080"
      EMAIL: "devops@sofwerx.org"
      DNS_DOMAIN: ${DNS_DOMAIN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
      AWS_REGION: ${AWS_REGION}
    volumes:
      - traefik-ssl:/ssl
      - /var/run/docker.sock:/var/run/docker.sock
    logging: *default-logging
    labels:
      traefik.backend: "traefik"
      traefik.port: "8080"
      traefik.frontend.rule: "Host:traefik.${DNS_DOMAIN}"
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.entryPoints: "http,https"

  postgres:
    extends:
      file: docker-guacamole/docker-compose.yml
      service: postgres
    networks:
      - default
    volumes:
      - postgres-data:/var/lib/postgresql/data
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  adminer:
    extends:
      file: docker-guacamole/docker-compose.yml
      service: adminer
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=adminer"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:adminer.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
    logging: *default-logging

  guacd:
    build:
      context: docker-guacamole/guacd/
      dockerfile: Dockerfile.ppc64le
    image: sofwerx/guacd:ppc64le
    extends:
      file: docker-guacamole/docker-compose.yml
      service: guacd
    networks:
      - default
    volumes:
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=true"
      - "traefik.backend=guacd"
      - "traefik.port=4822"
      - "traefik.frontend.rule=Host:guacd.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  guacamole:
    build:
      context: docker-guacamole/guacamole/
      dockerfile: Dockerfile.ppc64le
    image: sofwerx/guacamole:ppc64le
    extends:
      file: docker-guacamole/docker-compose.yml
      service: guacamole
    networks:
      - default
    volumes:
      - guacamole-data:/data
      - traefik-ssl:/ssl
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=guacamole"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:guacamole.${DNS_DOMAIN};AddPrefix:/guacamole"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  ethminer:
    container_name: ethminer
    hostname: ethminer
    extends:
      file: docker-ethminer/docker-compose.yml
      service: ethminer
    build:
      context: docker-ethminer/
      dockerfile: Dockerfile.ppc64le
    labels:
      - "traefik.enable=false"
    logging: *default-logging
    networks:
      - default

  mainnet:
    container_name: mainnet
    hostname: mainnet
    extends:
      file: docker-ethereum/docker-compose.yml
      service: ethereum
    build:
      context: docker-ethereum/
      dockerfile: Dockerfile.${ARCH}
    image: sofwerx/ethereum:${ARCH}
    volumes:
      - ethereum-mainnet-cachedir:/cachedir
      - ethereum-mainnet-dagdir:/dagdir
      - ethereum-mainnet-datadir:/datadir
      - ethereum-mainnet-keystore:/keystore
    command: >-
      geth --cache=2048
      --datadir=/datadir --keystore=/keystore 
      --ethash.cachedir=/cachedir --ethash.dagdir=/dagdir
      --ipcpath=/datadir/geth.ipc
      --metrics
      --shh --shh.maxmessagesize=1048576 --shh.pow=0.2
      --rpc --rpcaddr=0.0.0.0 --rpcport=8545
      --ws --wsaddr=0.0.0.0 --wsport=8546
    restart: always
    ports:
      - "127.0.0.1:8545:8545" # RPC (do not publically expose)
      - "127.0.0.1:8546:8546" # WS-RPC (do not publically expose)
      - "30303:30303"
      - "30303:30303/udp" 
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  rinkeby:
    container_name: rinkeby
    hostname: rinkeby
    extends:
      file: docker-ethereum/docker-compose.yml
      service: ethereum
    build:
      context: docker-ethereum/
      dockerfile: Dockerfile.${ARCH}
    image: sofwerx/ethereum:${ARCH}
    volumes:
      - ethereum-rinkeby-cachedir:/cachedir
      - ethereum-rinkeby-dagdir:/dagdir
      - ethereum-rinkeby-datadir:/datadir
      - ethereum-rinkeby-keystore:/keystore
    command: >-
      geth --rinkeby --cache=2048
      --datadir=/datadir --keystore=/keystore 
      --ethash.cachedir=/cachedir --ethash.dagdir=/dagdir
      --ipcpath=/datadir/geth.ipc
      --metrics
      --shh --shh.maxmessagesize=1048576 --shh.pow=0.2
      --rpc --rpcaddr=0.0.0.0 --rpcport=8547
      --ws --wsaddr 0.0.0.0 --wsport=8548
      --port 30305
    restart: always
    ports:
      - "127.0.0.1:8547:8545" # RPC (do not publically expose)
      - "127.0.0.1:8548:8546" # WS-RPC (do not publically expose)
      - "30305:30305"
      - "30305:30305/udp" 
      - "30306:30306/udp"
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  swarm:
    container_name: swarm
    hostname: swarm
    build:
      context: docker-ethereum/
      dockerfile: Dockerfile.${ARCH}
    image: sofwerx/ethereum:${ARCH}
    restart: always
    volumes:
      - ethereum-mainnet-datadir:/datadir
      - ethereum-mainnet-keystore:/keystore
    networks:
      - default
    ports:
      - 127.0.0.1:8500:8500
      - 30399:30399
    labels:
      - "traefik.enable=false"
    logging: *default-logging
    command: >-
      sh -xc "
      echo ${SWARM_PASSWORD} > /tmp/password; 
      exec swarm --bzzaccount ${BZZACCOUNT}
      --bzznetworkid=0
      --corsdomain=swarm.${DNS_DOMAIN}
      --ens-api=/datadir/geth.ipc
      --datadir=/datadir
      --ipcpath=/datadir/swarm.ipc
      --keystore=/keystore
      --port=30399
      --httpaddr=0.0.0.0
      --password=/tmp/password
      "

#  ipfs:
#    container_name: ipfs
#    hostname: ipfs
#    privileged: true
#    restart: always
#    build:
#      context: docker-ipfs/
#      dockerfile: Dockerfile.${ARCH}
#    image: sofwerx/ipfs:${ARCH}
#    environment:
#      ARCH: ${ARCH}
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ipfs-staging:/export
#      - ipfs-data:/data/ipfs
#      - /:/chroot
#    ports:
#      - 4001:4001             # public swarm address
#      - 127.0.0.1:5001:5001   # api service
#      - 127.0.0.1:8080:8080   # gateway service
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=ipfs"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#      - "traefik.port=5001"
#      - "traefik.frontend.rule=Host:ipfs.${DNS_DOMAIN};Path:/;AddPrefix:/webui"
#      - "traefik.ipfs.port=8080"
#      - "traefik.ipfs.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/ipfs"
#      - "traefik.webui.port=5001"
#      - "traefik.webui.frontend.rule=Host:ipfs.${DNS_DOMAIN};PathPrefix:/webui"

#  test:
#    image: ubuntu:xenial
#    volumes:
#      - test-data:/data

#  # IOTA coin
#  iri:
#    extends:
#      file: iri/docker-compose.yml
#      service: iri
#    image: sofwerx/iri:${ARCH}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=iri"
#      - "traefik.port=14265"
#      - "traefik.frontend.rule=Host:iota.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#    logging: *default-logging
#    command: ["/run.sh", "-XX:+DisableAttachMechanism", "-Xmx768g", "-Xms256g", "-Dlogback.configurationFile=/iri/conf/logback.xml", "-Djava.net.preferIPv4Stack=true", "-jar", "iri.jar", "-p", "14265", "-u", "14777", "-t", "15777", "--remote", "--remote-limit-api", "\"addNeighbors, removeNeighbors, getNeighbors\"", "-n", "tcp://176.9.3.149:14265 tcp://5.9.118.112:14265 tcp://5.9.137.199:14265 tcp://5.9.149.169:14265 tcp://88.198.230.98:14265 tcp://cryptoiota.win:14265 tcp://eugene.iota.community:14265 tcp://eugene.iota.comunity:14265 tcp://eugene.iotasupport.com:14999 tcp://eugeneoldisoft.iotasupport.com:14265 tcp://iotanode.farm:14265 tcp://mainnet.necropaz.com:14500 tcp://node.deviceproof.org:14265 tcp://node.lukaseder.de:14265 tcp://node01.iotatoken.nl:14265 tcp://node02.iotatoken.nl:14265 tcp://node03.iotatoken.nl:15265 tcp://node04.iotatoken.nl:14265 tcp://node05.iotatoken.nl:16265 tcp://node06.iotatoken.nl:14265 tcp://wallets.iotamexico.com:80 udp://176.9.3.149:14777 udp://5.9.118.112:14777 udp://5.9.137.199:14777 udp://5.9.149.169:14777 udp://88.198.230.98:14777 udp://cryptoiota.win:14777 udp://eugene.iota.community:14777 udp://eugene.iota.comunity:14777 udp://eugeneoldisoft.iotasupport.com:14777 udp://iotanode.farm:14777 udp://node.deviceproof.org:14777 udp://node.lukaseder.de:14777 udp://node01.iotatoken.nl:14777 udp://node02.iotatoken.nl:14777 udp://node04.iotatoken.nl:14777 udp://node06.iotatoken.nl:14777 udp://94.156.128.15:14600 udp://185.181.8.149:14600", "$$@"]
#
#  nelson:
#    build:
#      context: nelson.cli/
#      dockerfile: Dockerfile.${ARCH}
#    image: sofwerx/nelson:${ARCH}
#    network_mode: host
#    container_name: nelson
#    hostname: nelson
#    command: -r 127.0.0.1 -i 14265 -u 14777 -t 15777 --neighbors "mainnet.deviota.com/16600 mainnet2.deviota.com/16600 mainnet3.deviota.com/16600 iotairi.tt-tec.net/16600"

#  # IOTA Spam Fund
#  isf:
#    build: isf-jclient/
#    image: sofwerx/isf-jclient
#    restart: always
#    container_name: isf
#    hostname: isf
#    logging: *default-logging
#    environment:
#      SYNC_CHECK_INTERVAL: '600'
#      THIRD_PARTY_NODE_LIST: 'true'
#      INTERVAL: '60'
#      TIME_FORMAT: 'HH:mm:ss'
#      THREADS_AMOUNT: '1'
#      THREADS_PRIORITY: '2'
#      NODE_LIST: ${NODE_LIST}
#      EMAIL: ${ISF_EMAIL}
#      PASSWORD: ${ISF_PASSWORD}

#  xmrminer:
#    extends:
#      file: docker-xmr-miner/docker-compose.yml
#      service: xmrminer
#    logging: *default-logging
#    environment:
#      USERNAME: ${MONERO_USERNAME}
#      PASSWORD: ${MONERO_PASSWORD}
#      HOSTPORT: ${MONERO_HOSTPORT}
#    tty: true

#  dtube:
#    extends:
#      file: docker-dtube/docker-compose.yml
#      service: dtube
#    container_name: dtube
#    hostname: dtube
#    restart: always
#    environment:
#      IPFS_HOST: ipfs
#    networks:
#      - default
#    logging: *default-logging
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=dtube"
#      - "traefik.port=3000"
#      - "traefik.frontend.rule=Host:dtube.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#
#  dcs:
#    extends:
#      file: docker-dtube/docker-compose.yml
#      service: dcs
#    container_name: dcs
#    hostname: dcs
#    restart: always
#    environment:
#      IPFS_HOST: ipfs
#    networks:
#      - default
#    logging: *default-logging
#    command: npm start
#    labels:
#      - "traefik.enable=false"

  jupyterhub-postgres:
    image: postgres:9.5
    container_name: jupyterhub-postgres
    hostname: jupyterhub-postgres
    restart: always
    networks:
      - default
    environment:
      POSTGRES_DB: jupyterhub
      PGDATA: /var/lib/postgresql/data
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - "jupyterhub-postgres-data:/var/lib/postgresql/data"
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  jupyterhub:
    build:
      context: docker-jupyterhub/
      dockerfile: Dockerfile
    restart: always
    image: jupyterhub
    container_name: jupyterhub
    networks:
      - default
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "jupyterhub-data:/data"
      - traefik-ssl:/ssl
    environment:
      # All containers will join this network
      DOCKER_NETWORK_NAME: ${COMPOSE_PROJECT_NAME}_default
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: sofwerx/jupyter-notebook:${ARCH}-${TARGET}
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: /home/jovyan/work
      # Using this run command (optional)
      DOCKER_SPAWN_CMD: start-singleuser.sh
      # Postgres db info
      POSTGRES_DB: jupyterhub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: jupyterhub-postgres
      GITHUB_CLIENT_ID: ${JUPYTERHUB_GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${JUPYTERHUB_GITHUB_CLIENT_SECRET}
      GITHUB_USERLIST: ${JUPYTERHUB_GITHUB_USERLIST}
      OAUTH_CALLBACK_URL: ${JUPYTERHUB_OAUTH_CALLBACK_URL}
    logging: *default-logging
    labels:
      traefik.backend: "jupyterhub"
      traefik.port: "443"
      traefik.protocol: "https"
      traefik.frontend.rule: "Host:jupyterhub.${DNS_DOMAIN}"
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.headers.customRequestHeaders: "Sec-Websocket-Protocol:binary,base64"
      traefik.frontend.entryPoints: "https"

  jupyter-notebook:
    build:
      context: docker-jupyterhub/jupyter-notebook/
      dockerfile: Dockerfile.${ARCH}-${TARGET}
      args:
        ARCH: ${ARCH}
    image: sofwerx/jupyter-notebook:${ARCH}-${TARGET}
    container_name: jupyter-notebook
    hostname: jupyter-notebook
    labels:
      - "traefik.enable=false"

  aad-postgres:
    extends:
      file: aad-api.yml
      service: aad-postgres

  aad-api:
    extends:
      file: aad-api.yml
      service: aad-api

  aad-ui:
    extends:
      file: aad-ui.yml
      service: aad-ui

  ssb:
    container_name: ssb
    hostname: ssb
    build: easy-ssb-pub/
    environment:
      HOST: "ssb.${DNS_DOMAIN}"
      HOME: "/root"
      DEBUG: "*"
    ports:
      - "80:80"
      - "8008:8008"
      - "8007:8007"
    volumes:
      - /data:/root/.ssb
    mem_limit: 4500M
    restart: unless-stopped
    networks:
      - default
    logging: *default-logging
    labels:
      traefik.backend: "ssb"
      traefik.port: "80"
      traefik.protocol: "http"
      traefik.frontend.rule: "Host:ssb.${DNS_DOMAIN}"
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.entryPoints: "http,https"

  blockpy:
    build: docker-blockpy/
    image: blockpy
    container_name: blockpy
    hostname: blockpy
    restart: unless-stopped
    networks:
      - default
    logging: *default-logging
    labels:
      traefik.backend: "blockpy"
      traefik.port: "8000"
      traefik.protocol: "http"
      traefik.frontend.rule: "Host:blockpy.${DNS_DOMAIN}"
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.entryPoints: "http,https"

