version: '2.1'

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks:
  default:
    driver: bridge

volumes:
  traefik-ssl:
    driver: local

  jira-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/jira
  jira-postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/jira-postgres

  confluence-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/confluence

  confluence-postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/confluence-postgres

  gitlab-runner-config:
    driver: local
  gitlab-runner-data:
    driver: local
  gitlab-runner-cache:
    driver: local

  gogs-mysql:
    driver: local
  gogs-data:
    driver: local

  chedata:
    driver: local
  chebackup:
    driver: local
  cheinstance:
    driver: local

  theia-data:
    driver: local

services:

  traefik:
    extends:
      file: docker-traefik/docker-compose.yml
      service: traefik
    volumes:
      - traefik-ssl:/ssl
    restart: always
    ports:
      - 80:60080
      - 443:60443
      - 60080:60080
      - 60443:60443
    networks:
      - default
    environment:
      REST_PORT: "7080"
      HTTP_PORT: "60080"
      HTTPS_PORT: "60443"
      EMAIL: "devops@sofwerx.org"
      DNS_DOMAIN: ${DNS_DOMAIN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=7080"
      - "traefik.frontend.rule=Host:traefik.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  jira:
    container_name: jira
    hostname: jira
    build:
      context: docker-jira/
      args:
        JIRA_VERSION: ${JIRA_VERSION}
    image: sofwerx/jira:${JIRA_VERSION}
    restart: always
    networks:
      - default
    volumes:
      - jira-data:/var/atlassian/jira
    environment:
      JIRA_DATABASE_URL: postgresql://${JIRA_DB_USER}@jira-postgres/${JIRA_DB_NAME}
      JIRA_DB_PASSWORD: ${JIRA_DB_PASSWORD}
      SETENV_JVM_MINIMUM_MEMORY: 256m
      SETENV_JVM_MAXIMUM_MEMORY: 4g
      JIRA_PROXY_NAME: jira.${DNS_DOMAIN}
      JIRA_PROXY_PORT: 443
      JIRA_PROXY_SCHEME: https
      #CATALINA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8099
    logging: *default-logging
    labels:
      com.blacklabelops.description: "Atlassian Jira"
      com.blacklabelops.service: "jira"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=jira"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:jira.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:https://jira.${DNS_DOMAIN}||Vary:Origin"
      - "traefik.frontend.headers.customRequestHeaders=Origin:https://jira.${DNS_DOMAIN}"

  jira-postgres:
    container_name: jira-postgres
    hostname: jira-postgres
    build:
      context: docker-jira-postgres/
      args:
        POSTGRES_VERSION: ${JIRA_DB_VERSION}
    image: sofwerx/jira-postgres:${JIRA_DB_VERSION}
    restart: always
    networks:
      - default
    volumes:
      - jira-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${JIRA_DB_USER}
      POSTGRES_PASSWORD: ${JIRA_DB_PASSWORD}
      POSTGRES_DB: ${JIRA_DB_NAME}
      POSTGRES_ENCODING: UNICODE
      POSTGRES_COLLATE: C
      POSTGRES_COLLATE_TYPE: C
    logging: *default-logging
    labels:
      com.blacklabelops.description: "PostgreSQL Database Server"
      com.blacklabelops.service: "postgresql"
    labels:
      - "traefik.enable=false"

  confluence:
    container_name: confluence
    hostname: confluence
    build:
      context: docker-confluence/
      args:
        CONFLUENCE_VERSION: ${CONFLUENCE_VERSION}
    image: sofwerx/confluence:${JIRA_VERSION}
    restart: always
    networks:
      - default
    volumes:
      - confluence-data:/var/atlassian/confluence
    environment:
      CATALINA_OPTS: "-Xms256m -Xmx4g"
      CONFLUENCE_DATABASE_URL: postgresql://${JIRA_DB_USER}@confluence-postgres/${JIRA_DB_NAME}
      CONFLUENCE_DB_PASSWORD: ${JIRA_DB_PASSWORD}
      #CONFLUENCE_PROXY_NAME:
      #CONFLUENCE_PROXY_PORT:
      #CONFLUENCE_PROXY_SCHEME:
      #CONFLUENCE_DELAYED_START:
      CONFLUENCE_VERSION: ${CONFLUENCE_VERSION}
    logging: *default-logging
    labels:
      com.blacklabelops.description: "Atlassian Confluence"
      com.blacklabelops.service: "confluence"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=confluence"
      - "traefik.port=8090"
      - "traefik.frontend.rule=Host:confluence.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:https://confluence.${DNS_DOMAIN}||Vary:Origin"
      - "traefik.frontend.headers.customRequestHeaders=Origin:http://confluence.${DNS_DOMAIN}"

  confluence-postgres:
    container_name: confluence-postgres
    hostname: confluence-postgres
    build:
      context: docker-jira-postgres/
      args:
        POSTGRES_VERSION: ${JIRA_DB_VERSION}
    image: sofwerx/jira-postgres:${JIRA_DB_VERSION}
    restart: always
    networks:
      - default
    volumes:
      - confluence-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${JIRA_DB_USER}
      POSTGRES_PASSWORD: ${JIRA_DB_PASSWORD}
      POSTGRES_DB: ${JIRA_DB_NAME}
      POSTGRES_ENCODING: UNICODE
      POSTGRES_COLLATE: C
      POSTGRES_COLLATE_TYPE: C
    logging: *default-logging
    labels:
      com.blacklabelops.description: "PostgreSQL Database Server"
      com.blacklabelops.service: "postgresql"
    labels:
      - "traefik.enable=false"

  gitlab:
    container_name: gitlab
    hostname: gitlab
    image: 'gitlab/gitlab-ee:latest'
    restart: always
    hostname: "gitlab.${DNS_DOMAIN}"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url "https://gitlab.${DNS_DOMAIN}"
        nginx['redirect_http_to_https'] = true
        gitlab_rails['gitlab_shell_ssh_port'] = 60122
        gitlab_rails['lfs_enabled'] = true
        # Each address is added to the the NGINX config as 'set_real_ip_from <address>;'
        nginx['real_ip_trusted_addresses'] = [ '172.18.0.0/24' ]
        # other real_ip config options
        nginx['real_ip_header'] = 'X-Real-IP'
        nginx['real_ip_recursive'] = 'on'
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        gitlab_rails['trusted_proxies'] = [ '172.18.0.0/24' ]
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = "${GITLAB_SMTP_ADDRESS}"
        gitlab_rails['smtp_port'] = 587
        gitlab_rails['gitlab_email_from'] = "${GITLAB_SMTP_USER_NAME}"
        gitlab_rails['gitlab_email_reply_to'] = "${GITLAB_SMTP_USER_NAME}"
        gitlab_rails['smtp_user_name'] = "${GITLAB_SMTP_USER_NAME}"
        gitlab_rails['smtp_password'] = "${GITLAB_SMTP_PASSWORD}"
        gitlab_rails['smtp_domain'] = "${GITLAB_SMTP_DOMAIN}"
        gitlab_rails['smtp_authentication'] = "login"
        gitlab_rails['smtp_enable_starttls_auto'] = true
        #gitlab_rails['smtp_tls'] = false
        gitlab_rails['smtp_openssl_verify_mode'] = 'peer'
        # gitlab_rails['smtp_openssl_verify_mode'] = 'none'
        # gitlab_rails['smtp_ca_path'] = "/etc/ssl/certs"
        # gitlab_rails['smtp_ca_file'] = "/etc/ssl/certs/ca-certificates.crt"
        ## Add any other gitlab.rb configuration here, each on its own line
        gitlab_rails['gitlab_default_projects_features_builds'] = false
    ports:
      - "60122:22"
    volumes:
      - '/data/gitlab/config:/etc/gitlab'
      - '/data/gitlab/logs:/var/log/gitlab'
      - '/data/gitlab/data:/var/opt/gitlab'
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=gitlab"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:gitlab.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  gitlab-runner:
    container_name: gitlab-runner
    hostname: gitlab-runner
    build: docker-gitlab-runner/
    image: 'sofwerx/gitlab-runner:latest'
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - gitlab-runner-config:/etc/gitlab-runner
      - gitlab-runner-data:/home/gitlab-runner
      - gitlab-runner-cache:/cache
    environment:
      #CI_DEBUG_TRACE: "true"
      CI_SERVER_URL: "https://gitlab.${DNS_DOMAIN}"
      DOCKER_IMAGE: ruby:2.1
      DOCKER_VOLUME_DRIVER: overlay2
      REGISTER_LOCKED: "false"
      REGISTER_NON_INTERACTIVE: "true"
      REGISTER_RUN_UNTAGGED: "true"
      REGISTRATION_TOKEN: ${GITLAB_RUNNER_TOKEN}
      RUNNER_CACHE_DIR: /cache
      RUNNER_ENV: "DOCKER_DRIVER=overlay2"
      RUNNER_EXECUTOR: docker
      RUNNER_NAME: gitlab-runner

#  motion43:
#    build: docker-motion/
#    image: sofwerx/motion
#    volumes:
#    container_name: motion43
#    hostname: motion43
#    restart: always
#    ports:
#      - 20043:20043
#      - 21043:21043
#    environment:
#      WEBCONTROL_PORT: 20043
#      STREAM_PORT: 21043
#      RTSP_URL: ${RTSP_URL_43}
#      RTSP_AUTH: ${RTSP_AUTH_43}
#      RTSP_LABEL: ${RTSP_LABEL_43}
#      ES_MOTION_URL: ${ES_MOTION_URL}
##      ES_MOTION_HTTP_AUTH: ${ES_MOTION_HTTP_AUTH}
#      SECURE_MINIO_URL: ${SECURE_MINIO_URL}
#      MINIO_URL: ${MINIO_URL}
#      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
#      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
#      FRAMERATE: 7
#    volumes:
#      - /data/motion43:/data
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=motion43"
#      - "traefik.port=20043"
#      - "traefik.frontend.rule=Host:motion43.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#
#  motion44:
#    build: docker-motion/
#    image: sofwerx/motion
#    volumes:
#    container_name: motion44
#    hostname: motion44
#    restart: always
#    ports:
#      - 20044:20044
#      - 21044:21044
#    environment:
#      WEBCONTROL_PORT: 20044
#      STREAM_PORT: 21044
#      RTSP_URL: ${RTSP_URL_44}
#      RTSP_AUTH: ${RTSP_AUTH_44}
#      RTSP_LABEL: ${RTSP_LABEL_44}
#      ES_MOTION_URL: ${ES_MOTION_URL}
##      ES_MOTION_HTTP_AUTH: ${ES_MOTION_HTTP_AUTH}
#      SECURE_MINIO_URL: ${SECURE_MINIO_URL}
#      MINIO_URL: ${MINIO_URL}
#      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
#      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
#      FRAMERATE: 7
#    volumes:
#      - /data/motion44:/data
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=motion44"
#      - "traefik.port=20044"
#      - "traefik.frontend.rule=Host:motion44.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"
#
#  motion45:
#    build: docker-motion/
#    image: sofwerx/motion
#    volumes:
#    container_name: motion45
#    hostname: motion45
#    restart: always
#    ports:
#      - 20045:20045
#      - 21045:21045
#    environment:
#      WEBCONTROL_PORT: 20045
#      STREAM_PORT: 21045
#      RTSP_URL: ${RTSP_URL_45}
#      RTSP_AUTH: ${RTSP_AUTH_45}
#      RTSP_LABEL: ${RTSP_LABEL_45}
#      ES_MOTION_URL: ${ES_MOTION_URL}
##      ES_MOTION_HTTP_AUTH: ${ES_MOTION_HTTP_AUTH}
#      SECURE_MINIO_URL: ${SECURE_MINIO_URL}
#      MINIO_URL: ${MINIO_URL}
#      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
#      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
#      FRAMERATE: 7
#    volumes:
#      - /data/motion45:/data
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=motion45"
#      - "traefik.port=20045"
#      - "traefik.frontend.rule=Host:motion45.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

  gogs-mysql:
    image: mariadb:10.4
    container_name: gogs-mysql
    hostname: gogs-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${GOGS_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: gogs
    volumes:
      - gogs-mysql:/var/lib/mysql
    networks:
      - default
    restart: always
    healthcheck:
      test: mysqladmin -h localhost -u root -p$${GOGS_MYSQL_ROOT_PASSWORD} ping
      timeout: 20s
      retries: 10
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    logging: *default-logging
    labels:
      - "traefik.enable=false"

  gogs:
    container_name: gogs
    hostname: gogs
    build:
      context: gogs/
      dockerfile: Dockerfile
    image: sofwerx/gogs
    ports:
      - '62022:22'
    volumes:
      - 'gogs-data:/data'
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=gogs"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:gogs.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

#  che:
#    container_name: che
#    hostname: che
#    image: eclipse/che-server:6.5.0
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /data/che:/data/
#    networks:
#      - default
#    environment:
#      CHE_HOST: che.${DNS_DOMAIN}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=che"
#      - "traefik.port=8080"
#      - "traefik.frontend.rule=Host:che.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

#  theia:
#    container_name: theia
#    hostname: theia
#    image: theiaide/theia-full:next
#    volumes:
#      - theia-data:/home/project
#    networks:
#      - default
#    logging: *default-logging
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=theia"
#      - "traefik.port=3000"
#      - "traefik.frontend.rule=Host:theia.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

