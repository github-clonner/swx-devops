swx_dm_ls ()
{
  trousseau keys | grep -e ^file:secrets/dm/ | cut -d/ -f3-
}

swx_dm_env ()
{
  if which dmport > /dev/null ; then
    mkdir -p "${devops}/secrets/dm"
    if trousseau get file:secrets/dm/$1 > /dev/null 2>&1 ; then
      swx_secrets_decrypt secrets/dm/$1
      if  [ -s "${devops}/secrets/dm/$1" ]; then
        dm="$(cat ${devops}/secrets/dm/$1)"
        eval $(dmport --import $dm)
        if trousseau get dm2environment:$1 > /dev/null 2>&1 ; then
          environment="$(trousseau get dm2environment:$1)"
          swx_environment_switch $environment
        fi
      fi
    else
      if [ -s "${devops}/secrets/dm/$1" ]; then
        echo "dm $1 does not exist in trousseau, but does exist as a secrets file in ${devops}/secrets/dm/$1"
        echo "This may mean that your gpg-agent has gone away, you may want to run this: swx gpg remember"
        echo "Or, if your gpg-agent is setup correctly, you may want to run this: swx secrets encrypt secrets/dm/$1"
      else
        echo "dm $1 does not exist. try: swx dm ls"
      fi
      return 1
    fi
  else
    echo "You need to do a npm install of dmport to use this function."
    return 1
  fi
}

# Allow importing a docker-machine as a dm
swx_dm_import ()
{
  if which dmport > /dev/null ; then
    dmport --export "$1" > "${devops}/secrets/dm/$1"
    swx_secrets_encrypt secrets/dm/$1
  else
    echo "You need to do a npm install of dmport to use this function." 1>&2
    return 1
  fi
}

# Allow exporting a dm for docker-machine to use
swx_dm_export ()
{
  local dm_host="$1"
  if swx_dm_env "$dm_host" ; then
    if [ ! -d "${devops}/secrets/docker/machines/$dm_host/" ]; then
      mkdir -p "${devops}/secrets/docker/machines/$dm_host/"
      for key in $( cat "${devops}/secrets/dm/$dm_host" | jq -r .machines[\""$dm_host"\"] | jq keys | jq -r .[]) ; do
        cat "${devops}/secrets/dm/$dm_host" | jq -r .machines[\""$dm_host"\"][\""$key"\"] | openssl base64 -d > "${devops}/secrets/docker/machines/${dm_host}/${key}"
      done
      sed -i% -e "s%__MACHINE_PATH__%${devops}/secrets/docker/machines/${dm_host}/%" \
        -e "s%__MACHINE_CERT_PATH__%${devops}/secrets/docker/machines/${dm_host}/%" \
        -e "s%__MACHINE_STORE_PATH__%${devops}/secrets/docker/machines/${dm_host}/%" \
        "${devops}/secrets/docker/machines/${dm_host}/config.json"
      if [ -f "${devops}/secrets/docker/machines/${dm_host}/config.json%" ]; then
        rm -f "${devops}/secrets/docker/machines/${dm_host}/config.json%"
      fi
    else
      echo "Cannot export. There is already a docker-machine directory at ${devops}/secrets/docker/machines/$dm_host/"
      return 1
    fi
  fi
}

swx_dm ()
{
  case $1 in
ls) shift; swx_dm_ls $@ ;;
env) shift; swx_dm_env $@ ;;
import) shift; swx_dm_import $@ ;;
export) shift; swx_dm_export $@ ;;
*) cat <<EOU 1>&2
Usage: swx dm {action}
  ls     - List dm instances
  env    - Source the environment to interact with a dm instance using docker
  import - Import a docker-machine instance into a dm
  export - Export a dm into a docker-machine
EOU
  return 1
  ;;
  esac
}

